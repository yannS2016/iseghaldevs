/****************************************************************************
** Meta object code from reading C++ file 'iseghalremotetest.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.7)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'iseghalremotetest.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.7. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_IsegHalRemoteTest_t {
    QByteArrayData data[34];
    char stringdata0[741];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_IsegHalRemoteTest_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_IsegHalRemoteTest_t qt_meta_stringdata_IsegHalRemoteTest = {
    {
QT_MOC_LITERAL(0, 0, 17), // "IsegHalRemoteTest"
QT_MOC_LITERAL(1, 18, 12), // "initTestCase"
QT_MOC_LITERAL(2, 31, 0), // ""
QT_MOC_LITERAL(3, 32, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 48, 16), // "server_isRunning"
QT_MOC_LITERAL(5, 65, 25), // "networkTimeout_getDefault"
QT_MOC_LITERAL(6, 91, 31), // "networkTimeout_setBeforeConnect"
QT_MOC_LITERAL(7, 123, 31), // "networkTimeout_getBeforeConnect"
QT_MOC_LITERAL(8, 155, 28), // "sessionName_getBeforeConnect"
QT_MOC_LITERAL(9, 184, 20), // "sessionName_isUnique"
QT_MOC_LITERAL(10, 205, 21), // "isegConnect_wrongHost"
QT_MOC_LITERAL(11, 227, 21), // "isegConnect_wrongPort"
QT_MOC_LITERAL(12, 249, 21), // "isegConnect_wrongUser"
QT_MOC_LITERAL(13, 271, 25), // "isegConnect_wrongPassword"
QT_MOC_LITERAL(14, 297, 14), // "isegConnect_ok"
QT_MOC_LITERAL(15, 312, 24), // "isegConnect_secondClient"
QT_MOC_LITERAL(16, 337, 28), // "isegConnect_alreadyConnected"
QT_MOC_LITERAL(17, 366, 21), // "getItem_serverVersion"
QT_MOC_LITERAL(18, 388, 25), // "getProperty_serverVersion"
QT_MOC_LITERAL(19, 414, 22), // "getItem_networkTimeout"
QT_MOC_LITERAL(20, 437, 26), // "getProperty_networkTimeout"
QT_MOC_LITERAL(21, 464, 19), // "getItem_sessionName"
QT_MOC_LITERAL(22, 484, 23), // "getProperty_sessionName"
QT_MOC_LITERAL(23, 508, 15), // "getItem_bitRate"
QT_MOC_LITERAL(24, 524, 20), // "getItem_canBusStatus"
QT_MOC_LITERAL(25, 545, 26), // "getItemString_canBusStatus"
QT_MOC_LITERAL(26, 572, 17), // "getItem_benchmark"
QT_MOC_LITERAL(27, 590, 11), // "getProperty"
QT_MOC_LITERAL(28, 602, 17), // "getPropertyString"
QT_MOC_LITERAL(29, 620, 20), // "checkServerStability"
QT_MOC_LITERAL(30, 641, 16), // "getItem_parallel"
QT_MOC_LITERAL(31, 658, 26), // "isegDisconnect_firstClient"
QT_MOC_LITERAL(32, 685, 27), // "isegDisconnect_secondClient"
QT_MOC_LITERAL(33, 713, 27) // "isegDisconnect_notConnected"

    },
    "IsegHalRemoteTest\0initTestCase\0\0"
    "cleanupTestCase\0server_isRunning\0"
    "networkTimeout_getDefault\0"
    "networkTimeout_setBeforeConnect\0"
    "networkTimeout_getBeforeConnect\0"
    "sessionName_getBeforeConnect\0"
    "sessionName_isUnique\0isegConnect_wrongHost\0"
    "isegConnect_wrongPort\0isegConnect_wrongUser\0"
    "isegConnect_wrongPassword\0isegConnect_ok\0"
    "isegConnect_secondClient\0"
    "isegConnect_alreadyConnected\0"
    "getItem_serverVersion\0getProperty_serverVersion\0"
    "getItem_networkTimeout\0"
    "getProperty_networkTimeout\0"
    "getItem_sessionName\0getProperty_sessionName\0"
    "getItem_bitRate\0getItem_canBusStatus\0"
    "getItemString_canBusStatus\0getItem_benchmark\0"
    "getProperty\0getPropertyString\0"
    "checkServerStability\0getItem_parallel\0"
    "isegDisconnect_firstClient\0"
    "isegDisconnect_secondClient\0"
    "isegDisconnect_notConnected"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_IsegHalRemoteTest[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      32,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  174,    2, 0x08 /* Private */,
       3,    0,  175,    2, 0x08 /* Private */,
       4,    0,  176,    2, 0x08 /* Private */,
       5,    0,  177,    2, 0x08 /* Private */,
       6,    0,  178,    2, 0x08 /* Private */,
       7,    0,  179,    2, 0x08 /* Private */,
       8,    0,  180,    2, 0x08 /* Private */,
       9,    0,  181,    2, 0x08 /* Private */,
      10,    0,  182,    2, 0x08 /* Private */,
      11,    0,  183,    2, 0x08 /* Private */,
      12,    0,  184,    2, 0x08 /* Private */,
      13,    0,  185,    2, 0x08 /* Private */,
      14,    0,  186,    2, 0x08 /* Private */,
      15,    0,  187,    2, 0x08 /* Private */,
      16,    0,  188,    2, 0x08 /* Private */,
      17,    0,  189,    2, 0x08 /* Private */,
      18,    0,  190,    2, 0x08 /* Private */,
      19,    0,  191,    2, 0x08 /* Private */,
      20,    0,  192,    2, 0x08 /* Private */,
      21,    0,  193,    2, 0x08 /* Private */,
      22,    0,  194,    2, 0x08 /* Private */,
      23,    0,  195,    2, 0x08 /* Private */,
      24,    0,  196,    2, 0x08 /* Private */,
      25,    0,  197,    2, 0x08 /* Private */,
      26,    0,  198,    2, 0x08 /* Private */,
      27,    0,  199,    2, 0x08 /* Private */,
      28,    0,  200,    2, 0x08 /* Private */,
      29,    0,  201,    2, 0x08 /* Private */,
      30,    0,  202,    2, 0x08 /* Private */,
      31,    0,  203,    2, 0x08 /* Private */,
      32,    0,  204,    2, 0x08 /* Private */,
      33,    0,  205,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void IsegHalRemoteTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        IsegHalRemoteTest *_t = static_cast<IsegHalRemoteTest *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->server_isRunning(); break;
        case 3: _t->networkTimeout_getDefault(); break;
        case 4: _t->networkTimeout_setBeforeConnect(); break;
        case 5: _t->networkTimeout_getBeforeConnect(); break;
        case 6: _t->sessionName_getBeforeConnect(); break;
        case 7: _t->sessionName_isUnique(); break;
        case 8: _t->isegConnect_wrongHost(); break;
        case 9: _t->isegConnect_wrongPort(); break;
        case 10: _t->isegConnect_wrongUser(); break;
        case 11: _t->isegConnect_wrongPassword(); break;
        case 12: _t->isegConnect_ok(); break;
        case 13: _t->isegConnect_secondClient(); break;
        case 14: _t->isegConnect_alreadyConnected(); break;
        case 15: _t->getItem_serverVersion(); break;
        case 16: _t->getProperty_serverVersion(); break;
        case 17: _t->getItem_networkTimeout(); break;
        case 18: _t->getProperty_networkTimeout(); break;
        case 19: _t->getItem_sessionName(); break;
        case 20: _t->getProperty_sessionName(); break;
        case 21: _t->getItem_bitRate(); break;
        case 22: _t->getItem_canBusStatus(); break;
        case 23: _t->getItemString_canBusStatus(); break;
        case 24: _t->getItem_benchmark(); break;
        case 25: _t->getProperty(); break;
        case 26: _t->getPropertyString(); break;
        case 27: _t->checkServerStability(); break;
        case 28: _t->getItem_parallel(); break;
        case 29: _t->isegDisconnect_firstClient(); break;
        case 30: _t->isegDisconnect_secondClient(); break;
        case 31: _t->isegDisconnect_notConnected(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject IsegHalRemoteTest::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_IsegHalRemoteTest.data,
      qt_meta_data_IsegHalRemoteTest,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *IsegHalRemoteTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *IsegHalRemoteTest::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_IsegHalRemoteTest.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int IsegHalRemoteTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 32)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 32;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 32)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 32;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
